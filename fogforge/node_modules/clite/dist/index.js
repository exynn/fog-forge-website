'use strict';

var parseArgs = require('./args');
var debug = require('debug')('clite');
var getSettings = require('./settings');
var path = require('path');
var findRoot = require('./find-root');
var read = require('./read-stdin');

module.exports = function (config, root) {
  var paths = (root ? [path.join(root, 'node_modules')] : module.parent.parent.paths).slice(0); // copy
  var settings = getSettings(config);

  return Promise.all([parseArgs(process.argv, config), read(), findRoot(paths).then(function (res) {
    return root = res;
  })]).then(function (res) {
    return loadCommand(root, res[0], res[1], settings);
  }).then(function (res) {
    require('./update')(root);
    /* istanbul ignore if */
    if (!settings.return) {
      return console.log(res);
    }

    return res;
  }).catch(function (e) {
    /* istanbul ignore if */
    if (!settings.return) {
      debug(e.stack);
      console.error(e.message);
      return process.exit(1);
    }
    throw e;
  });
};

function loadCommand(root, args, body, settings) {
  var filename = args.command;
  debug('running ' + filename);
  if (filename.indexOf(':::') === 0) {
    filename = filename.slice(3);
    debug('loading internal module: %s', filename);
    return Promise.resolve(require(filename)(root, args, settings)).then(function (res) {
      /* istanbul ignore if */
      if (!settings.return) {
        console.log(res);
        return process.exit(0);
      }
      return res;
    });
  }

  var pkg = path.resolve(root, filename);
  debug('loading %s', pkg, args);
  return require(pkg)(args, settings, body);
}